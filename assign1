;Michael 
;01/19/17
;CS3140 Assignment 1
;command line to assemble into 32 bit Linux object file: nasm -f elf32 assign1.asm
;command line to link into 32 bit Linux executable file: ld -o assign1 -m elf_i386 assign1.o
;comand line details to run program: ./assign1
;user will use standard i/o at the command line
;user will enter Ctrl + d keys simulatenously to terminate program from command line

bits 32 			; Tell Nasm using 32 bit compilation

global _start		; make _start symbol visible to linker

_start:  			; Program entry, label template is _label:
	mov	eax, 3		; 3 is READ syscall
	mov ebx, 0		; 0 is Standard IN - KEYBOARD
	mov ecx, esp	; ECX points to WRITABLE memory the STACK/ESP for READ syscall

	mov edx, 1		; Read 1 bit at a time 
	int 0x80		; 0x80 is EXECUTE command to READ 1 bit from KEYBOARD
	cmp eax, 1		; Comparison test to see if 1 bit exists to be read 
	jne _exitprogram	; JNE is Jump Not Equal to comparison of 1
	mov	eax, 4 		; 4 is WRITE syscall
	mov	ebx, 1		; 1 is Standard OUT - CONSOLE			
	mov	ecx, esp	; ECX points to READABLE memory the STACK/ESP for WRITE syscall
	int 0x80		; 0x80 is EXECUTE command to WRITE 1 bit to CONSOLE
	jmp _start		; Continue loop again until failing condition

_exitprogram:
	mov eax, 1		; 1 is EXIT syscall
	int 0x80		; 0x80 is EXECUTE command to terminate program
